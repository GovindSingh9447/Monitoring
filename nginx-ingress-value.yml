global:
  imageRegistry: ""
  imagePullSecrets: []
  compatibility:
    openshift:
      adaptSecurityContext: auto

kubeVersion: ""
nameOverride: ""
fullnameOverride: ""
namespaceOverride: ""
commonLabels: {}
commonAnnotations: {}
extraDeploy: []
clusterDomain: cluster.local

image:
  registry: docker.io
  repository: bitnami/nginx-ingress-controller
  tag: 1.11.2-debian-12-r4
  digest: ""
  pullPolicy: IfNotPresent
  pullSecrets: []
containerPorts:
  http: 80
  https: 443
  defaultServer: 8181
  metrics: 10254
  profiler: 10245
  status: 10246
  stream: 10247
automountServiceAccountToken: true
hostAliases: []
config:
  custom-http-errors: 404,500,503
  enable-underscores-in-headers: "true"
  large-client-header-buffers: 8 128k
  proxy-buffer-size: 128k
  server-tokens: "False"
proxySetHeaders: {}
addHeaders: {}
defaultBackendService: ""
electionID: ingress-controller-leader
allowSnippetAnnotations: false
reportNodeInternalIp: false
watchIngressWithoutClass: true
ingressClassResource:
  name: nginx
  enabled: false
  default: false
  controllerClass: "k8s.io/ingress-nginx"
  parameters: {}
publishService:
  enabled: false
  pathOverride: ""
scope:
  enabled: true
  namespace: "uat"
configMapNamespace: ""
tcpConfigMapNamespace: ""
udpConfigMapNamespace: ""
maxmindLicenseKey: ""
dhParam: ""
tcp: {}
udp: {}
command: []
args: []
lifecycleHooks: {}
extraArgs: {}
extraEnvVars: []
extraEnvVarsCM: ""
extraEnvVarsSecret: ""

kind: Deployment
daemonset:
  useHostPort: false
  hostPorts:
    http: 80
    https: 443
replicaCount: 1
updateStrategy: {}
revisionHistoryLimit: 10
podSecurityContext:
  enabled: true
  fsGroupChangePolicy: Always
  sysctls: []
  supplementalGroups: []
  fsGroup: 1001
containerSecurityContext:
  enabled: true
  allowPrivilegeEscalation: true
  seLinuxOptions: null
  runAsUser: 1001
  runAsGroup: 1001
  readOnlyRootFilesystem: true
  capabilities:
    drop: ["ALL"]
    add: ["NET_BIND_SERVICE"]
  runAsNonRoot: true
  seccompProfile:
    type: "RuntimeDefault"
minReadySeconds: 0
resourcesPreset: "nano"
resources:
    limits: {}
    requests: {}
livenessProbe:
  enabled: true
  failureThreshold: 3
  initialDelaySeconds: 10
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 1
readinessProbe:
  enabled: true
  failureThreshold: 3
  initialDelaySeconds: 10
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 1
startupProbe:
  enabled: false
  failureThreshold: 3
  initialDelaySeconds: 10
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 1
customLivenessProbe: {}
customReadinessProbe: {}
customStartupProbe: {}
lifecycle: {}
podLabels: {}
podAnnotations: {}
priorityClassName: ""
schedulerName: ""
hostNetwork: false
dnsPolicy: ClusterFirst
dnsConfig: {}
terminationGracePeriodSeconds: 60
podAffinityPreset: ""
podAntiAffinityPreset: soft
nodeAffinityPreset:
  type: ""
  key: ""
  values: []
affinity: {}
nodeSelector:
    uat-nginx: "true"
tolerations:
 - effect: NoSchedule
   key: key
   operator: Equal
   value: persistTool
extraVolumes: []
extraVolumeMounts: []
initContainers: []
sidecars: []
customTemplate:
  configMapName: ""
  configMapKey: ""
topologySpreadConstraints: []
podSecurityPolicy:
  enabled: false

defaultBackend:
  enabled: true
  automountServiceAccountToken: true
  hostAliases: []
  image:
    registry: docker.io
    repository: bitnami/nginx
    tag: 1.27.1-debian-12-r3
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
  extraArgs: {}
  containerPort: 8080
  serverBlockConfig: |-
    location /healthz {
      return 200;
    }

    location / {
      return 404;
    }
  replicaCount: 1
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    allowPrivilegeEscalation: false
    seLinuxOptions: null
    runAsUser: 1001
    runAsGroup: 1001
    readOnlyRootFilesystem: true
    capabilities:
      drop: ["ALL"]
    runAsNonRoot: true
    seccompProfile:
      type: "RuntimeDefault"
  resourcesPreset: "nano"
  resources:
    limits: {}
    requests: {}
  livenessProbe:
    enabled: true
    failureThreshold: 3
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 0
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 5
  startupProbe:
    enabled: false
    failureThreshold: 6
    initialDelaySeconds: 0
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 5
  customStartupProbe: {}
  customLivenessProbe: {}
  customReadinessProbe: {}
  podLabels: {}
  podAnnotations: {}
  priorityClassName: ""
  schedulerName: ""
  terminationGracePeriodSeconds: 60
  topologySpreadConstraints: []
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  command: []
  args: []
  lifecycleHooks: {}
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumes: []
  extraVolumeMounts: []
  sidecars: []
  initContainers: []
  affinity: {}
  nodeSelector:
      uat-nginx: 'true'
  tolerations:
  - effect: NoSchedule
    key: key
    operator: Equal
    value: persistTool
  service:
    type: ClusterIP
    ports:
      http: 80
    annotations: {}
  networkPolicy:
    enabled: true
    allowExternal: true
    allowExternalEgress: true
    extraIngress: []
    extraEgress: []
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  pdb:
    create: false
    minAvailable: 1
    maxUnavailable: ""

service:
  type: NodePort
  ports:
    http: 80
    https: 443
  targetPorts:
    http: http
    https: https
  nodePorts:
    http: 30018
    https: 30019
    tcp: {}
    udp: {}
  annotations: {}
  labels: {}
  clusterIP: ""
  externalIPs: []
  ipFamilyPolicy: ""
  ipFamilies: []
  loadBalancerClass: ""
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  extraPorts: []
  externalTrafficPolicy: ""
  healthCheckNodePort: 0
  sessionAffinity: None
  sessionAffinityConfig: {}
networkPolicy:
  enabled: true
  allowExternal: true
  allowExternalEgress: true
  kubeAPIServerPorts: [443, 6443, 8443]
  extraIngress: []
  extraEgress: []
  ingressNSMatchLabels: {}
  ingressNSPodMatchLabels: {}

serviceAccount:
  create: true
  name: ""
  annotations: {}
  automountServiceAccountToken: true
rbac:
  create: true
  rules: []

pdb:
  create: false
  minAvailable: 1
  maxUnavailable: ""
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 11
  targetCPU: ""
  targetMemory: ""

metrics:
  enabled: false
  service:
    type: ClusterIP
    ports:
      metrics: 9913
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "{{ coalesce .Values.metrics.service.ports.metrics .Values.metrics.service.port }}"
    labels: {}
  serviceMonitor:
    enabled: false
    namespace: ""
    jobLabel: ""
    interval: 30s
    scrapeTimeout: ""
    relabelings: []
    metricRelabelings: []
    selector: {}
    annotations: {}
    labels: {}
    honorLabels: false
  prometheusRule:
    enabled: false
    additionalLabels: {}
    namespace: ""
    rules: []
